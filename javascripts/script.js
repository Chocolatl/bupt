// Generated by CoffeeScript 1.12.6
(function() {
  var BuTabs, Carousel,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  (function() {
    var ClassList, classListMethod, k, v;
    classListMethod = {
      contains: function(className) {
        return this.el.className.search(new RegExp("(^| )" + className + "( |$)")) !== -1;
      },
      add: function(className) {
        if (!this.el.classList.contains(className)) {
          if (this.el.className === "") {
            return this.el.className += className;
          } else {
            return this.el.className += " " + className;
          }
        }
      },
      remove: function(className) {
        return this.el.className = this.el.className.replace(new RegExp("(^| )" + className + "( |$)"), "");
      }
    };
    ClassList = function(el1) {
      this.el = el1;
      return this;
    };
    for (k in classListMethod) {
      v = classListMethod[k];
      ClassList.prototype[k] = v;
    }
    if (window.DOMTokenList == null) {
      return Object.defineProperty(Element.prototype, "classList", {
        get: function() {
          return new ClassList(this);
        }
      });
    }
  })();

  BuTabs = (function() {
    var isIE10, isIE11, setElementPosition, swapPosition;

    BuTabs.prototype.getTabs = function() {
      return this.el.querySelectorAll("* > .tab");
    };

    BuTabs.prototype.getShowTab = function() {
      return this.el.querySelector("* > .tab.show");
    };

    BuTabs.prototype.getBaseTabs = function() {
      return this.el.querySelectorAll("* > .tab:not(.show)");
    };

    function BuTabs(el1, conf1) {
      this.el = el1;
      this.conf = conf1;
      this.bindClickEvent = bind(this.bindClickEvent, this);
      this.setPosition = bind(this.setPosition, this);
      this.setPosition();
      this.bindClickEvent();
      window.addEventListener("resize", (function(_this) {
        return function() {
          return _this.setPosition();
        };
      })(this));
    }

    BuTabs.prototype.setPosition = function() {
      var basePos, baseTabs, docuWidth, i, j, matchingWidth, ref, ref1, rule, showPos, showTab, w;
      docuWidth = document.documentElement.clientWidth;
      matchingWidth = -1;
      for (w in this.conf) {
        if ((docuWidth > (ref = +w) && ref > matchingWidth)) {
          matchingWidth = w;
        }
      }
      rule = this.conf[matchingWidth];
      baseTabs = this.getBaseTabs();
      showTab = this.getShowTab();
      basePos = rule.posBase;
      showPos = rule.posShow;
      for (i = j = 0, ref1 = basePos.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        setElementPosition(baseTabs[i], basePos[i]);
      }
      return setElementPosition(showTab, showPos);
    };

    BuTabs.prototype.bindClickEvent = function() {
      var e, j, len, ref, results;
      ref = this.getTabs();
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        e = ref[j];
        results.push(e.addEventListener("click", (function(_this) {
          return function(ev) {
            var show, tab;
            tab = ev.currentTarget;
            show = _this.getShowTab();
            if (tab.classList.contains("show")) {
              return;
            }
            swapPosition(tab, show);
            tab.classList.add("show");
            show.classList.remove("show");
            if (isIE10() || isIE11()) {
              return show.addEventListener("transitionend", function(e) {
                var block;
                e.currentTarget.removeEventListener("transitionend", arguments.callee);
                block = show.querySelector("* > .block");
                return block.replaceNode(block.cloneNode(true));
              });
            }
          };
        })(this)));
      }
      return results;
    };

    swapPosition = function(a, b) {
      var ref;
      return ref = [b.style.top, b.style.left, a.style.top, a.style.left], a.style.top = ref[0], a.style.left = ref[1], b.style.top = ref[2], b.style.left = ref[3], ref;
    };

    setElementPosition = function(e, pos) {
      e.style.left = pos.x + "px";
      return e.style.top = pos.y + "px";
    };

    isIE11 = function() {
      return navigator.userAgent.indexOf("rv:11") !== -1;
    };

    isIE10 = function() {
      return navigator.userAgent.indexOf("MSIE 10.0") !== -1;
    };

    return BuTabs;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    var conf, el;
    conf = {
      0: {
        posBase: [
          {
            x: 0 * 103,
            y: 0 * 103
          }, {
            x: 1 * 103,
            y: 0 * 103
          }, {
            x: 0 * 103,
            y: 1 * 103
          }, {
            x: 1 * 103,
            y: 1 * 103
          }, {
            x: 6 * 103,
            y: 0 * 103
          }, {
            x: 7 * 103,
            y: 0 * 103
          }, {
            x: 6 * 103,
            y: 1 * 103
          }, {
            x: 7 * 103,
            y: 1 * 103
          }
        ],
        posShow: {
          x: 2 * 103,
          y: 0 * 103
        }
      },
      1330: {
        posBase: [
          {
            x: 0 * 103,
            y: 0 * 103
          }, {
            x: 1 * 103,
            y: 0 * 103
          }, {
            x: 0 * 103,
            y: 1 * 103
          }, {
            x: 1 * 103,
            y: 1 * 103
          }, {
            x: 7 * 103,
            y: 0 * 103
          }, {
            x: 8 * 103,
            y: 0 * 103
          }, {
            x: 7 * 103,
            y: 1 * 103
          }, {
            x: 8 * 103,
            y: 1 * 103
          }
        ],
        posShow: {
          x: 2 * 103,
          y: 0 * 103
        }
      }
    };
    el = document.querySelector(".bu-tabs");
    if (el != null) {
      return new BuTabs(el, conf);
    }
  });

  Carousel = (function() {
    var configuration, currentIndex, imageCover, imgNum, imgs, prevIndex, setElementStyle, setImageCover, timerId, toggle, transEnd;

    configuration = null;

    imgNum = null;

    imgs = null;

    prevIndex = null;

    currentIndex = 0;

    transEnd = true;

    timerId = null;

    function Carousel(el, conf) {
      this.playNext = bind(this.playNext, this);
      this.playPrev = bind(this.playPrev, this);
      var defaultConf, e, j, key, len, value;
      defaultConf = {
        autoPlay: false,
        autoPlayInterval: 8000,
        fade: true,
        move: true,
        moveNextOffset: "-16px",
        movePrevOffset: "16px",
        easing: "ease-out",
        speed: "1400ms",
        zIndex: "1000",
        initDelay: 0
      };
      for (key in conf) {
        if (!hasProp.call(conf, key)) continue;
        value = conf[key];
        if (defaultConf[key] != null) {
          defaultConf[key] = value;
        }
      }
      configuration = defaultConf;
      setElementStyle(el, {
        position: "relative"
      });
      imgs = el.querySelectorAll("* > *");
      imgNum = imgs.length;
      imageCover((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = imgs.length; j < len; j++) {
          e = imgs[j];
          if (e.tagName === "IMG") {
            results.push(e);
          }
        }
        return results;
      })());
      for (j = 0, len = imgs.length; j < len; j++) {
        e = imgs[j];
        setElementStyle(e, {
          opacity: "0",
          position: "absolute",
          top: "0",
          left: "0"
        });
      }
      setElementStyle(imgs[0], {
        opacity: "1"
      });
      if (configuration.autoPlay) {
        window.setTimeout((function(_this) {
          return function() {
            return timerId = window.setInterval(_this.playNext, configuration.autoPlayInterval);
          };
        })(this), configuration.initDelay);
      }
    }

    Carousel.prototype.playPrev = function() {
      if (!transEnd) {
        return;
      }
      transEnd = false;
      prevIndex = currentIndex;
      currentIndex--;
      if (currentIndex < 0) {
        currentIndex = imgNum - 1;
      }
      configuration.move && setElementStyle(imgs[currentIndex], {
        left: configuration.movePrevOffset
      });
      return toggle(this);
    };

    Carousel.prototype.playNext = function() {
      if (!transEnd) {
        return;
      }
      transEnd = false;
      prevIndex = currentIndex;
      currentIndex++;
      currentIndex %= imgNum;
      configuration.move && setElementStyle(imgs[currentIndex], {
        left: configuration.moveNextOffset
      });
      return toggle(this);
    };

    toggle = function(_this) {
      imgs[currentIndex].clientWidth;
      window.clearInterval(timerId);
      timerId = window.setInterval(_this.playNext, configuration.autoPlayInterval);
      setElementStyle(imgs[currentIndex], {
        left: "0",
        opacity: "1",
        zIndex: configuration.zIndex,
        transition: "all " + configuration.speed + " " + configuration.easing
      });
      imgs[currentIndex].addEventListener("transitionend", function() {
        transEnd = true;
        setElementStyle(imgs[currentIndex], {
          transition: "",
          zIndex: ""
        });
        return setElementStyle(imgs[prevIndex], {
          opacity: "0"
        });
      });
      try {
        return TransitionEvent;
      } catch (error) {
        transEnd = true;
        setElementStyle(imgs[currentIndex], {
          transition: "",
          zIndex: ""
        });
        return setElementStyle(imgs[prevIndex], {
          opacity: "0"
        });
      }
    };

    setElementStyle = function(el, rules) {
      var k, results, v;
      results = [];
      for (k in rules) {
        v = rules[k];
        results.push(el.style[k] = v);
      }
      return results;
    };

    imageCover = function(elements) {
      var el, j, len, results;
      if (elements.length == null) {
        elements = [elements];
      }
      window.addEventListener("resize", function() {
        var el, j, len, results;
        results = [];
        for (j = 0, len = elements.length; j < len; j++) {
          el = elements[j];
          results.push(setImageCover(el));
        }
        return results;
      });
      results = [];
      for (j = 0, len = elements.length; j < len; j++) {
        el = elements[j];
        setImageCover(el);
        results.push(el.addEventListener("load", (function(el) {
          return function() {
            return setImageCover(el);
          };
        })(el)));
      }
      return results;
    };

    setImageCover = function(el) {
      var callee, eh, ew, parent, ph, pw, ref, ref1, ref2, ref3;
      parent = el.parentElement;
      if (!el.style.width && !el.style.height) {
        el.style.width = "100%";
      }
      ref = [parent.clientWidth, parent.clientHeight], pw = ref[0], ph = ref[1];
      ref1 = [el.width, el.height], ew = ref1[0], eh = ref1[1];
      if (pw === 0 || ph === 0 || ew === 0 || eh === 0) {
        callee = arguments.callee;
        window.setTimeout((function() {
          return callee(el);
        }), 30);
        return;
      }
      if (el.style.width) {
        if (ph > eh) {
          return ref2 = ["100%", ""], el.style.height = ref2[0], el.style.width = ref2[1], ref2;
        }
      } else if (el.style.height) {
        if (pw > ew) {
          return ref3 = ["", "100%"], el.style.height = ref3[0], el.style.width = ref3[1], ref3;
        }
      }
    };

    return Carousel;

  })();

  document.addEventListener("DOMContentLoaded", function() {
    var control, el, next, prev;
    el = document.querySelector(".bg-carousel > .carousel");
    if (el == null) {
      return;
    }
    control = new Carousel(el, {
      autoPlay: true,
      zIndex: 900,
      autoPlayInterval: 8000,
      initDelay: 4000
    });
    prev = document.querySelector(".bg-carousel > .prev");
    next = document.querySelector(".bg-carousel > .next");
    prev && (prev.onclick = control.playPrev);
    return next && (next.onclick = control.playNext);
  });

  document.addEventListener("DOMContentLoaded", function() {
    var navbar, navbarOffsetTop;
    navbar = document.querySelector(".art-navbar");
    navbarOffsetTop = navbar != null ? navbar.offsetTop : void 0;
    if (navbarOffsetTop != null) {
      return window.addEventListener("scroll", function() {
        if ((document.body.scrollTop || document.documentElement.scrollTop) > navbarOffsetTop) {
          return navbar.classList.add("fixed");
        } else {
          return navbar.classList.remove("fixed");
        }
      });
    }
  });

}).call(this);
